{
  "createdAt": "2025-09-22T19:05:40.151Z",
  "updatedAt": "2025-09-22T19:07:14.369Z",
  "id": "Y0BaxX5lG3RXzTR2",
  "name": "My workflow 3",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "e70cadc7-fe1c-4b56-ad53-8e4c22ef5f4b",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\" class=\"dark\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Conector WhatsApp</title>\n    <style>\n      @import url(https://fonts.googleapis.com/css2?family=Lato&display=swap);\n@import url(https://fonts.googleapis.com/css2?family=Open+Sans&display=swap);\n    </style>\n  </head>\n  <body class=\"bg-gray-100 dark:bg-gray-900 transition-colors duration-200\">\n    <div id=\"webcrumbs\">\n      <!-- Tutorial Modal -->\n      <div id=\"tutorial-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <div class=\"bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-xl p-6 max-w-md mx-4 shadow-2xl\">\n          <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n            <svg class=\"w-6 h-6 text-[#9b3fbe] mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"/>\n            </svg>\n            Como Conectar seu WhatsApp\n          </h2>\n          <p class=\"text-gray-600 dark:text-gray-400 text-sm mb-6\">\n            Siga os passos abaixo para conectar seu WhatsApp a este painel\n          </p>\n          <div class=\"space-y-4\">\n            <div class=\"flex items-start\">\n              <div class=\"flex-shrink-0 bg-[#9b3fbe] text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium\">1</div>\n              <p class=\"ml-3 text-sm\">Clique no botão <span class=\"font-bold text-gray-900 dark:text-white\">\"Gerar QR Code\"</span> para gerar o QR Code.</p>\n            </div>\n            <div class=\"flex items-start\">\n              <div class=\"flex-shrink-0 bg-[#9b3fbe] text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium\">2</div>\n              <p class=\"ml-3 text-sm\">Abra o WhatsApp no seu celular e vá em <span class=\"font-bold text-gray-900 dark:text-white\">Configurações > Aparelhos conectados</span>.</p>\n            </div>\n            <div class=\"flex items-start\">\n              <div class=\"flex-shrink-0 bg-[#9b3fbe] text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium\">3</div>\n              <p class=\"ml-3 text-sm\">Toque em <span class=\"font-bold text-gray-900 dark:text-white\">\"Parear dispositivo\"</span> e <span class=\"font-bold text-gray-900 dark:text-white\">aponte a câmera</span> para o QR Code mostrado.</p>\n            </div>\n            <div class=\"flex items-start\">\n              <div class=\"flex-shrink-0 bg-[#9b3fbe] text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium\">4</div>\n              <p class=\"ml-3 text-sm\">Aguarde alguns segundos até o status mudar para \"Conectado\".</p>\n            </div>\n          </div>\n          <button id=\"close-tutorial\" class=\"mt-6 w-full bg-[#9b3fbe] hover:bg-[#9b3fbe]/90 active:bg-[#9b3fbe]/80 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200\">\n            Fechar Tutorial\n          </button>\n        </div>\n      </div>\n      <div class=\"bg-gradient-to-br from-primary-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 min-h-screen flex items-center justify-center font-sans p-4\">\n        <div class=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md p-8 transition-all duration-300 transform hover:shadow-primary-200/50 hover:-translate-y-1\">\n          <header class=\"text-center mb-8\">\n            <div class=\"flex justify-between items-center mb-4\">\n              <div class=\"flex-1 flex justify-center\">\n                <img src=\"https://iyup.com.br/wp-content/uploads/2024/10/logo-iyup-chat-novo.svg\" alt=\"iYupChat Logo\" class=\"h-8 w-auto dark:hidden\">\n                <img src=\"https://iyup.com.br/wp-content/uploads/2024/10/logo-iyup-chat-novo-dark.svg\" alt=\"iYupChat Logo\" class=\"h-8 w-auto hidden dark:block\">\n              </div>\n              <button id=\"theme-toggle\" class=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200\">\n                <svg id=\"theme-icon\" class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"></path>\n                </svg>\n              </button>\n            </div>\n            <p class=\"text-gray-600 dark:text-gray-300 text-sm\">Conecte seu WhatsApp aos nossos serviços</p>\n            <div class=\"mt-4 w-16 h-1 bg-primary-500 mx-auto rounded-full\"></div>\n          </header>\n          \n          <div class=\"space-y-6\" id=\"connection-form\">\n            <div>\n              <label for=\"instance\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Nome da Instância</label>\n              <input type=\"text\" id=\"instance\" class=\"w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" placeholder=\"minha-instancia-whatsapp\" required=\"\"/>\n            </div>\n            <button class=\"w-full bg-[#9b3fbe] text-white font-medium py-3 px-4 rounded-lg hover:bg-[#9b3fbe]/90 active:bg-[#9b3fbe]/80 transition-all duration-200 transform hover:shadow-lg flex items-center justify-center gap-2\" id=\"generate-qr\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M3 4a1 1 0 011-1h3a1 1 0 011 1v3a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm2 2V5h1v1H5zM3 13a1 1 0 011-1h3a1 1 0 011 1v3a1 1 0 01-1 1H4a1 1 0 01-1-1v-3zm2 2v-1h1v1H5zM13 3a1 1 0 00-1 1v3a1 1 0 001 1h3a1 1 0 001-1V4a1 1 0 00-1-1h-3zm1 2v1h1V5h-1zM13 12a1 1 0 00-1 1v3a1 1 0 001 1h3a1 1 0 001-1v-3a1 1 0 00-1-1h-3zm1 2v1h1v-1h-1z\" clip-rule=\"evenodd\"></path>\n              </svg>\n              Gerar QR Code\n            </button>\n          </div>\n\n          <div id=\"qr-display\" class=\"hidden mt-8 text-center\">\n            <div class=\"bg-white dark:bg-gray-700 rounded-2xl shadow-lg overflow-hidden\">\n              <div class=\"p-6 space-y-4\">\n                <div id=\"qrcode\" class=\"bg-white dark:bg-gray-800 w-48 h-48 mx-auto flex items-center justify-center rounded-xl shadow-inner\">\n                  <div id=\"loading-spinner\" class=\"hidden\">\n                    <svg class=\"animate-spin h-12 w-12 text-[#9b3fbe]\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                      <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                      <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg>\n                  </div>\n                  <canvas id=\"qrcodeCanvas\" style=\"display: none;\"></canvas>\n                </div>\n                <div id=\"countdown\" class=\"text-sm text-gray-600 dark:text-gray-400 mt-2\">\n                  Atualizando em: <span class=\"font-medium\">30s</span>\n                </div>\n                <div class=\"flex items-center justify-center gap-2 text-gray-600 dark:text-gray-300\">\n                  <svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z\"></path>\n                  </svg>\n                  <p class=\"text-sm font-medium\">Escaneie com seu WhatsApp</p>\n                </div>\n              </div>\n              <div id=\"connection-status\" class=\"px-6 py-4 bg-gray-50 dark:bg-gray-800 border-t border-gray-100 dark:border-gray-600\">\n                <div class=\"flex items-center justify-center text-xs text-gray-500 dark:text-gray-400\">\n                  <svg class=\"w-4 h-4 mr-1 animate-pulse\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path fill-rule=\"evenodd\" d=\"M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414zM7.879 6.464a1 1 0 010 1.414 3 3 0 000 4.243 1 1 0 11-1.415 1.414 5 5 0 010-7.07 1 1 0 011.415 0zm4.242 0a1 1 0 011.415 0 5 5 0 010 7.072 1 1 0 01-1.415-1.415 3 3 0 000-4.242 1 1 0 010-1.415z\" clip-rule=\"evenodd\"></path>\n                  </svg>\n                  Aguardando conexão...\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div id=\"status-display\" class=\"hidden mt-6\">\n            <div class=\"bg-green-50 dark:bg-green-900 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n              <div class=\"flex items-center justify-center\">\n                <svg class=\"h-5 w-5 text-green-500 dark:text-green-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                </svg>\n                <p class=\"text-green-700 dark:text-green-300 text-sm font-medium\">QR Code gerado com sucesso!</p>\n              </div>\n            </div>\n          </div>\n\n          <div id=\"error-display\" class=\"hidden mt-6\">\n            <div class=\"bg-red-50 dark:bg-red-900 border border-red-200 dark:border-red-800 rounded-lg p-6\">\n              <div class=\"flex flex-col items-center text-center space-y-3\">\n                <div class=\"flex-shrink-0\">\n                  <svg class=\"h-8 w-8 text-red-500 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                  </svg>\n                </div>\n                <div class=\"text-center\">\n                  <h3 class=\"text-lg font-medium text-red-800 dark:text-red-200 mb-2\">\n                    Instância não encontrada\n                  </h3>\n                  <p class=\"text-sm text-red-700 dark:text-red-300\">\n                    Verifique o nome da instância<br>e tente novamente.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div id=\"profile-actions\" class=\"hidden mt-6\">\n            <div class=\"flex justify-center gap-2\">\n              <button onclick=\"restartInstance()\" class=\"flex items-center px-2 py-1 text-xs font-medium text-yellow-700 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-300 focus:outline-none transition-colors duration-200\">\n                <svg class=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n                </svg>\n                Reiniciar\n              </button>\n              <button onclick=\"logoutInstance()\" class=\"flex items-center px-2 py-1 text-xs font-medium text-red-700 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 focus:outline-none transition-colors duration-200\">\n                <svg class=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"></path>\n                </svg>\n                Desconectar\n              </button>\n              <button onclick=\"updateProfileInfo()\" class=\"flex items-center px-2 py-1 text-xs font-medium text-blue-700 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 focus:outline-none transition-colors duration-200\">\n                <svg class=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v16a2 2 0 002 2h12a2 2 0 002-2V8.342a2 2 0 00-.602-1.43l-4.44-4.342A2 2 0 0014.341 2H6a2 2 0 00-2 2z\"></path>\n                </svg>\n                Atualizar\n              </button>\n              <button onclick=\"showEditProfileModal()\" class=\"flex items-center px-2 py-1 text-xs font-medium text-purple-700 hover:text-purple-800 dark:text-purple-400 dark:hover:text-purple-300 focus:outline-none transition-colors duration-200\">\n                <svg class=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"></path>\n                </svg>\n                Editar\n              </button>\n            </div>\n          </div>\n\n          <div class=\"mt-6\">\n            <button id=\"toggle-logs\" class=\"w-full flex items-center justify-center gap-2 text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition-colors duration-200\">\n              <svg id=\"logs-icon-closed\" class=\"w-4 h-4 transform transition-transform duration-200\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n              </svg>\n              <svg id=\"logs-icon-open\" class=\"w-4 h-4 transform rotate-180 transition-transform duration-200 hidden\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n              </svg>\n              <span>Logs do sistema</span>\n              <span id=\"logs-count\" class=\"inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-full ml-2\">0</span>\n            </button>\n            <div id=\"logs\" class=\"hidden mt-2 bg-gray-50 dark:bg-gray-700 rounded-lg p-4 max-h-40 overflow-y-auto transition-all duration-200\">\n              <div class=\"text-xs font-mono space-y-1\">\n                <div class=\"text-blue-600 dark:text-blue-400\">[Sistema iniciado] Aguardando conexão...</div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Modal de Edição do Perfil -->\n          <div id=\"edit-profile-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50\">\n            <div class=\"bg-white dark:bg-gray-800 text-gray-900 dark:text-white rounded-xl p-6 max-w-md mx-4 shadow-2xl w-full\">\n              <h2 class=\"text-xl font-semibold mb-4 flex items-center\">\n                <svg class=\"w-6 h-6 text-[#9b3fbe] mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"></path>\n                </svg>\n                Editar Perfil\n              </h2>\n              \n              <form id=\"edit-profile-form\" class=\"space-y-4\">\n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Nome do Perfil</label>\n                  <input type=\"text\" id=\"profile-name\" class=\"w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-[#9b3fbe] focus:border-transparent transition-all duration-200 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" placeholder=\"Seu nome\">\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Status</label>\n                  <input type=\"text\" id=\"profile-status\" class=\"w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-[#9b3fbe] focus:border-transparent transition-all duration-200 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" placeholder=\"Seu status\">\n                </div>\n                \n                <div>\n                  <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Foto do Perfil</label>\n                  <input type=\"file\" id=\"profile-picture\" accept=\"image/*\" class=\"w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-[#9b3fbe] focus:border-transparent transition-all duration-200 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\">\n                </div>\n\n                <div class=\"flex justify-end gap-2 mt-6\">\n                  <button type=\"button\" onclick=\"closeEditProfileModal()\" class=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-200 focus:outline-none transition-colors duration-200\">\n                    Cancelar\n                  </button>\n                  <button type=\"submit\" class=\"px-4 py-2 text-sm font-medium text-white bg-[#9b3fbe] hover:bg-[#9b3fbe]/90 rounded-lg focus:outline-none transition-colors duration-200\">\n                    Salvar Alterações\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          <footer class=\"mt-8 pt-4 border-t border-gray-100 dark:border-gray-700 text-center\">\n            <p class=\"text-xs text-gray-500 dark:text-gray-400\">Integração Segura com API WhatsApp</p>\n            <div class=\"mt-2 flex justify-center space-x-2\">\n              <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300\">\n                <span class=\"h-1.5 w-1.5 rounded-full bg-green-500 mr-1.5 animate-pulse\"></span>\n                Status: Pronto\n              </span>\n            </div>\n          </footer>\n        </div>\n      </div>\n    </div>\n\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js\"></script>\n    <script>\n      tailwind.config = {\n        content: [\"./src/**/*.{html,js}\"],\n        darkMode: 'class',\n        theme: {\n          \"name\": \"Bluewave\",\n          \"fontFamily\": {\n            \"sans\": [\"Open Sans\", \"ui-sans-serif\", \"system-ui\", \"sans-serif\", \"\\\"Apple Color Emoji\\\"\", \"\\\"Segoe UI Emoji\\\"\", \"\\\"Segoe UI Symbol\\\"\", \"\\\"Noto Color Emoji\\\"\"]\n          },\n          \"extend\": {\n            \"fontFamily\": {\n              \"title\": [\"Lato\", \"ui-sans-serif\", \"system-ui\", \"sans-serif\", \"\\\"Apple Color Emoji\\\"\", \"\\\"Segoe UI Emoji\\\"\", \"\\\"Segoe UI Symbol\\\"\", \"\\\"Noto Color Emoji\\\"\"],\n              \"body\": [\"Open Sans\", \"ui-sans-serif\", \"system-ui\", \"sans-serif\", \"\\\"Apple Color Emoji\\\"\", \"\\\"Segoe UI Emoji\\\"\", \"\\\"Segoe UI Symbol\\\"\", \"\\\"Noto Color Emoji\\\"\"]\n            },\n            \"colors\": {\n              \"neutral\": {\n                \"50\": \"#f7f7f7\",\n                \"100\": \"#eeeeee\",\n                \"200\": \"#e0e0e0\",\n                \"300\": \"#cacaca\",\n                \"400\": \"#b1b1b1\",\n                \"500\": \"#999999\",\n                \"600\": \"#7f7f7f\",\n                \"700\": \"#676767\",\n                \"800\": \"#545454\",\n                \"900\": \"#464646\",\n                \"950\": \"#282828\"\n              },\n              \"primary\": {\n                \"50\": \"#f3f1ff\",\n                \"100\": \"#e9e5ff\",\n                \"200\": \"#d5cfff\",\n                \"300\": \"#b7a9ff\",\n                \"400\": \"#9478ff\",\n                \"500\": \"#7341ff\",\n                \"600\": \"#631bff\",\n                \"700\": \"#611bf8\",\n                \"800\": \"#4607d0\",\n                \"900\": \"#3c08aa\",\n                \"950\": \"#220174\",\n                \"DEFAULT\": \"#611bf8\"\n              }\n            }\n          }\n        },\n        plugins: [],\n        important: '#webcrumbs'\n    };\n\n      function addLog(message, type = 'info') {\n        const logsDiv = document.getElementById('logs');\n        const logEntry = document.createElement('div');\n        const color = type === 'info' ? 'text-blue-600 dark:text-blue-400' : \n                     type === 'success' ? 'text-green-600 dark:text-green-400' : \n                     'text-red-600 dark:text-red-400';\n        logEntry.className = `${color} text-xs font-mono`;\n        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;\n        logsDiv.querySelector('.space-y-1').appendChild(logEntry);\n        logsDiv.scrollTop = logsDiv.scrollHeight;\n\n        // Atualiza o contador de logs\n        const logsCount = document.getElementById('logs-count');\n        const currentCount = parseInt(logsCount.textContent);\n        logsCount.textContent = currentCount + 1;\n      }\n\n      // Função para gerar QR code\n      async function generateQRCode(baseUrl, instance, apiKey) {\n        try {\n          // Para o contador atual\n          stopCountdown();\n          \n          // Mostra o spinner de carregamento\n          document.getElementById('loading-spinner').classList.remove('hidden');\n          document.getElementById('qrcodeCanvas').style.display = 'none';\n\n          // Primeiro verifica se já está conectado\n          const statusResponse = await fetch(`${baseUrl}/instance/connectionState/${instance}`, {\n            method: 'GET',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          if (statusResponse.ok) {\n            const statusData = await statusResponse.json();\n            if (statusData.instance.state === 'open') {\n              addLog('WhatsApp já está conectado, não é necessário gerar QR code', 'info');\n              document.getElementById('loading-spinner').classList.add('hidden');\n              document.getElementById('qrcodeCanvas').style.display = 'block';\n              return true;\n            }\n          }\n\n          const response = await fetch(`${baseUrl}/instance/connect/${instance}`, {\n            method: 'GET',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          addLog(`Status da resposta: ${response.status}`, 'info');\n\n          if (!response.ok) {\n            if (response.status === 404) {\n              // Esconde o container do QR code\n              document.getElementById('qr-display').classList.add('hidden');\n              document.getElementById('loading-spinner').classList.add('hidden');\n              \n              // Esconde a mensagem de sucesso\n              document.getElementById('status-display').classList.add('hidden');\n              \n              // Mostra mensagem de erro específica para instância não encontrada\n              const errorDisplay = document.getElementById('error-display');\n              errorDisplay.classList.remove('hidden');\n              errorDisplay.innerHTML = `\n                <div class=\"bg-red-50 dark:bg-red-900 border border-red-200 dark:border-red-800 rounded-lg p-6\">\n                  <div class=\"flex flex-col items-center text-center space-y-3\">\n                    <div class=\"flex-shrink-0\">\n                      <svg class=\"h-8 w-8 text-red-500 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                      </svg>\n                    </div>\n                    <div class=\"text-center\">\n                      <h3 class=\"text-lg font-medium text-red-800 dark:text-red-200 mb-2\">\n                        Instância não encontrada\n                      </h3>\n                      <p class=\"text-sm text-red-700 dark:text-red-300\">\n                        Verifique o nome da instância<br>e tente novamente.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              `;\n              \n              // Mostra o formulário novamente\n              document.getElementById('connection-form').classList.remove('hidden');\n              \n              addLog('Instância não encontrada', 'error');\n              return false;\n            }\n            throw new Error(`Erro na conexão: ${response.status}`);\n          }\n\n          const data = await response.json();\n          if (!data.code) {\n            addLog('QR Code não disponível no momento', 'info');\n            document.getElementById('loading-spinner').classList.add('hidden');\n            document.getElementById('qrcodeCanvas').style.display = 'block';\n            return false;\n          }\n\n          addLog('Resposta recebida com sucesso', 'success');\n          \n          // Limpa o QR code anterior\n          document.getElementById('qrcode').innerHTML = `\n            <div id=\"loading-spinner\">\n              <svg class=\"animate-spin h-12 w-12 text-[#9b3fbe]\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n            </div>\n            <canvas id=\"qrcodeCanvas\" style=\"display: none;\"></canvas>\n          `;\n          \n          // Gera o novo QR code\n          const canvas = document.getElementById('qrcodeCanvas');\n          QRCode.toCanvas(canvas, data.code, {\n            width: 180,\n            height: 180,\n            margin: 0\n          }, function (error) {\n            if (error) {\n              addLog(`Erro ao gerar QR Code: ${error.message}`, 'error');\n              console.error(error);\n              document.getElementById('error-display').classList.remove('hidden');\n              document.getElementById('status-display').classList.add('hidden');\n              document.getElementById('loading-spinner').classList.add('hidden');\n              document.getElementById('qrcodeCanvas').style.display = 'block';\n            } else {\n              addLog('QR Code gerado com sucesso', 'success');\n              // Esconde o spinner e mostra o QR code\n              document.getElementById('loading-spinner').classList.add('hidden');\n              document.getElementById('qrcodeCanvas').style.display = 'block';\n              \n              // Garante que o container do QR code está visível\n              document.getElementById('qr-display').classList.remove('hidden');\n              document.getElementById('status-display').classList.remove('hidden');\n            }\n          });\n\n          return true;\n        } catch (error) {\n          addLog(`Erro ao gerar QR Code: ${error.message}`, 'error');\n          document.getElementById('loading-spinner').classList.add('hidden');\n          document.getElementById('qrcodeCanvas').style.display = 'block';\n          return false;\n        }\n      }\n\n      // Função para iniciar o contador regressivo\n      function startCountdown(baseUrl, instance, apiKey) {\n        // Limpa qualquer intervalo existente\n        if (window.countdownInterval) {\n          clearInterval(window.countdownInterval);\n        }\n\n        let timeLeft = 30;\n        const countdownElement = document.getElementById('countdown').querySelector('span');\n        \n        // Atualiza o contador imediatamente\n        countdownElement.textContent = `${timeLeft}s`;\n        \n        // Cria um novo intervalo\n        window.countdownInterval = setInterval(() => {\n          timeLeft--;\n          countdownElement.textContent = `${timeLeft}s`;\n          \n          if (timeLeft <= 0) {\n            clearInterval(window.countdownInterval);\n            generateQRCode(baseUrl, instance, apiKey).then(() => {\n              // Reinicia o contador após gerar o novo QR code\n              startCountdown(baseUrl, instance, apiKey);\n            });\n          }\n        }, 1000);\n      }\n\n      // Função para parar o contador\n      function stopCountdown() {\n        if (window.countdownInterval) {\n          clearInterval(window.countdownInterval);\n          window.countdownInterval = null;\n        }\n      }\n\n      document.getElementById('generate-qr').addEventListener('click', async (e) => {\n        e.preventDefault();\n        \n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n        \n        addLog(`Iniciando conexão com: ${baseUrl}`, 'info');\n        addLog(`Instância: ${instance}`, 'info');\n        addLog('Verificando status da conexão...', 'info');\n\n        try {\n          // Primeiro verifica se já está conectado\n          const statusResponse = await fetch(`${baseUrl}/instance/connectionState/${instance}`, {\n            method: 'GET',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          if (statusResponse.ok) {\n            const statusData = await statusResponse.json();\n            \n            if (statusData.instance.state === 'open') {\n              addLog('WhatsApp já está conectado!', 'success');\n              \n              // Oculta o formulário\n              document.getElementById('connection-form').classList.add('hidden');\n              \n              // Atualiza o status de conexão\n              document.getElementById('qr-display').classList.add('hidden');\n              document.getElementById('error-display').classList.add('hidden');\n              \n              // Atualiza a mensagem de sucesso\n              const statusDisplay = document.getElementById('status-display');\n              statusDisplay.classList.remove('hidden');\n              statusDisplay.querySelector('p').textContent = 'WhatsApp conectado';\n              \n              // Busca e exibe as informações da instância\n              await fetchInstanceInfo(baseUrl, instance, apiKey);\n              \n              // Inicia a verificação contínua do status\n              checkConnectionStatus(baseUrl, instance, apiKey);\n              return;\n            }\n          }\n          \n          // Se não estiver conectado, procede com a geração do QR code\n          addLog('Gerando novo QR Code...', 'info');\n          \n          // Oculta o formulário\n          document.getElementById('connection-form').classList.add('hidden');\n          \n          // Mostra o container do QR code\n          document.getElementById('qr-display').classList.remove('hidden');\n          document.getElementById('status-display').classList.remove('hidden');\n          document.getElementById('error-display').classList.add('hidden');\n          \n          // Gera o QR code inicial\n          const success = await generateQRCode(baseUrl, instance, apiKey);\n          \n          if (success) {\n            // Inicia o contador e a atualização automática\n            startCountdown(baseUrl, instance, apiKey);\n            \n            // Inicia a verificação do status\n            checkConnectionStatus(baseUrl, instance, apiKey);\n          }\n\n        } catch (error) {\n          addLog(`Erro: ${error.message}`, 'error');\n          document.getElementById('error-display').classList.remove('hidden');\n          document.getElementById('status-display').classList.add('hidden');\n        }\n      });\n\n      // Função para verificar o status da conexão\n      async function checkConnectionStatus(baseUrl, instance, apiKey) {\n        let statusInterval;\n        let lastQRGeneration = 0;\n        let lastConnectionState = null;\n        let lastInfoUpdate = 0;\n        const INFO_UPDATE_INTERVAL = 30000; // Atualiza informações a cada 30 segundos\n        \n        const checkStatus = async () => {\n          try {\n            const response = await fetch(`${baseUrl}/instance/connectionState/${instance}`, {\n              method: 'GET',\n              headers: {\n                'apikey': apiKey\n              }\n            });\n\n            if (response.ok) {\n              const data = await response.json();\n              const currentState = data.instance.state;\n              const now = Date.now();\n\n              // Se o estado mudou ou se passou tempo suficiente desde a última atualização\n              if (currentState !== lastConnectionState || (now - lastInfoUpdate >= INFO_UPDATE_INTERVAL)) {\n                // Se mudou de conectado para desconectado, força geração de novo QR code\n                if (lastConnectionState === 'open' && currentState !== 'open') {\n                  lastQRGeneration = 0; // Reseta o timer do QR code\n                  addLog('Dispositivo desconectado, gerando novo QR code...', 'info');\n                  \n                  // Mostra o container do QR code\n                  document.getElementById('qr-display').classList.remove('hidden');\n                  document.getElementById('status-display').classList.remove('hidden');\n                  \n                  // Gera um novo QR code imediatamente após detectar a desconexão\n                  await generateQRCode(baseUrl, instance, apiKey);\n                  startCountdown(baseUrl, instance, apiKey);\n                }\n\n                lastConnectionState = currentState;\n                lastInfoUpdate = now;\n\n                // Atualiza a interface com base no estado atual\n                if (currentState !== 'open') {\n                  // Mostra o container do QR code\n                  document.getElementById('qr-display').classList.remove('hidden');\n                  document.getElementById('status-display').classList.remove('hidden');\n                  \n                  // Esconde o profile-info\n                  const profileInfo = document.getElementById('profile-info');\n                  if (profileInfo) {\n                    profileInfo.classList.add('hidden');\n                  }\n\n                  // Esconde as ações do perfil\n                  document.getElementById('profile-actions').classList.add('hidden');\n\n                  // Se passou tempo suficiente, gera novo QR code\n                  if (now - lastQRGeneration >= 30000) {\n                    lastQRGeneration = now;\n                    await generateQRCode(baseUrl, instance, apiKey);\n                    startCountdown(baseUrl, instance, apiKey);\n                  }\n                } else {\n                  // Se estiver conectado\n                  document.getElementById('qr-display').classList.add('hidden');\n\n                  // Mostra o profile-info se existir\n                  const profileInfo = document.getElementById('profile-info');\n                  if (profileInfo) {\n                    profileInfo.classList.remove('hidden');\n                  }\n\n                  // Mostra as ações do perfil\n                  document.getElementById('profile-actions').classList.remove('hidden');\n\n                  // Atualiza as informações do perfil\n                  await fetchInstanceInfo(baseUrl, instance, apiKey);\n                }\n\n                // Atualiza o status de conexão\n                updateConnectionStatus(currentState);\n              }\n            }\n          } catch (error) {\n            console.error('Erro ao verificar status:', error);\n          }\n        };\n\n        // Função auxiliar para atualizar o status de conexão na interface\n        function updateConnectionStatus(state) {\n          const connectionStatus = document.getElementById('connection-status');\n          const statusDisplay = document.getElementById('status-display');\n\n          if (state === 'open') {\n            connectionStatus.innerHTML = `\n              <div class=\"flex items-center justify-center text-xs text-gray-500 dark:text-gray-400\">\n                <svg class=\"w-4 h-4 mr-1 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"></path>\n                </svg>\n                Conectado\n              </div>\n            `;\n\n            statusDisplay.innerHTML = `\n              <div class=\"bg-green-50 dark:bg-green-900 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                <div class=\"flex items-center justify-center\">\n                  <svg class=\"h-5 w-5 text-green-500 dark:text-green-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                  </svg>\n                  <p class=\"text-green-700 dark:text-green-300 text-sm font-medium\">WhatsApp conectado</p>\n                </div>\n              </div>\n            `;\n          } else {\n            connectionStatus.innerHTML = `\n              <div class=\"flex items-center justify-center text-xs text-gray-500 dark:text-gray-400\">\n                <svg class=\"w-4 h-4 mr-1 animate-pulse\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" d=\"M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414zM7.879 6.464a1 1 0 010 1.414 3 3 0 000 4.243 1 1 0 11-1.415 1.414 5 5 0 010-7.07 1 1 0 011.415 0zm4.242 0a1 1 0 011.415 0 5 5 0 010 7.072 1 1 0 01-1.415-1.415 3 3 0 000-4.242 1 1 0 010-1.415z\" clip-rule=\"evenodd\"></path>\n                </svg>\n                Aguardando conexão...\n              </div>\n            `;\n\n            statusDisplay.innerHTML = `\n              <div class=\"bg-red-50 dark:bg-red-900 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n                <div class=\"flex items-center justify-center\">\n                  <svg class=\"h-5 w-5 text-red-500 dark:text-red-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                  </svg>\n                  <p class=\"text-red-700 dark:text-red-300 text-sm font-medium\">WhatsApp desconectado</p>\n                </div>\n              </div>\n            `;\n          }\n        }\n\n        // Verifica o status a cada 3 segundos\n        statusInterval = setInterval(async () => {\n          await checkStatus();\n        }, 3000);\n\n        // Executa uma verificação imediata\n        await checkStatus();\n\n        // Retorna uma função para limpar o intervalo quando necessário\n        return () => {\n          clearInterval(statusInterval);\n        };\n      }\n\n      // Função para buscar informações da instância\n      async function fetchInstanceInfo(baseUrl, instance, apiKey) {\n        try {\n          const response = await fetch(`${baseUrl}/instance/fetchInstances?instanceName=${instance}`, {\n            method: 'GET',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            \n            // Verifica se há dados e pega a primeira instância\n            const instanceInfo = Array.isArray(data) && data.length > 0 ? data[0] : null;\n            \n            if (instanceInfo) {\n              // Remove o container anterior se existir\n              const existingProfile = document.getElementById('profile-info');\n              if (existingProfile) {\n                existingProfile.remove();\n              }\n\n              // Se estiver desconectado, não exibe o perfil\n              if (instanceInfo.connectionStatus !== 'open') {\n                addLog('Instância desconectada', 'error');\n                document.getElementById('profile-actions').classList.add('hidden');\n                return;\n              }\n              \n              // Mostra as ações do perfil\n              document.getElementById('profile-actions').classList.remove('hidden');\n              \n              // Cria o container para as informações do perfil\n              const profileInfo = document.createElement('div');\n              profileInfo.id = 'profile-info';\n              profileInfo.className = 'mt-6 bg-white dark:bg-gray-800 rounded-lg p-4 shadow-lg';\n              profileInfo.innerHTML = `\n                <div class=\"flex flex-col space-y-4\">\n                  <div class=\"flex items-center space-x-4\">\n                    <div class=\"flex-shrink-0\">\n                      <img src=\"${instanceInfo.profilePicUrl || 'https://via.placeholder.com/50'}\" \n                           alt=\"Foto do perfil\" \n                           class=\"h-12 w-12 rounded-full object-cover\">\n                    </div>\n                    <div class=\"flex-1 min-w-0\">\n                      <p class=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                        ${instanceInfo.profileName || 'Nome não disponível'}\n                      </p>\n                      <p class=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                        ${instanceInfo.number || instanceInfo.ownerJid || 'Número não disponível'}\n                      </p>\n                    </div>\n                    <div class=\"flex-shrink-0\">\n                      <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        instanceInfo.connectionStatus === 'open' \n                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'\n                          : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\n                      }\">\n                        ${instanceInfo.connectionStatus === 'open' ? 'Conectado' : 'Desconectado'}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div class=\"grid grid-cols-3 gap-4 pt-3 border-t border-gray-200 dark:border-gray-700\">\n                    <div class=\"text-center\">\n                      <p class=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        ${instanceInfo._count.Chat.toLocaleString()}\n                      </p>\n                      <p class=\"text-xs text-gray-500 dark:text-gray-400\">Conversas</p>\n                    </div>\n                    <div class=\"text-center\">\n                      <p class=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        ${instanceInfo._count.Contact.toLocaleString()}\n                      </p>\n                      <p class=\"text-xs text-gray-500 dark:text-gray-400\">Contatos</p>\n                    </div>\n                    <div class=\"text-center\">\n                      <p class=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        ${instanceInfo._count.Message.toLocaleString()}\n                      </p>\n                      <p class=\"text-xs text-gray-500 dark:text-gray-400\">Mensagens</p>\n                    </div>\n                  </div>\n                </div>\n              `;\n\n              // Insere o profile-info após o status display\n              const statusDisplay = document.getElementById('status-display');\n              statusDisplay.parentNode.insertBefore(profileInfo, statusDisplay.nextSibling);\n            }\n          }\n        } catch (error) {\n          console.error('Erro ao buscar informações da instância:', error);\n        }\n      }\n\n      // Função para reiniciar a instância\n      async function restartInstance() {\n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n\n        try {\n          addLog('Reiniciando instância...', 'info');\n          \n          // Primeiro desconecta a instância\n          const logoutResponse = await fetch(`${baseUrl}/instance/logout/${instance}`, {\n            method: 'DELETE',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          if (!logoutResponse.ok) {\n            throw new Error(`Erro ao desconectar: ${logoutResponse.status}`);\n          }\n\n          addLog('Instância desconectada, reconectando...', 'info');\n\n          // Aguarda um momento antes de reconectar\n          await new Promise(resolve => setTimeout(resolve, 2000));\n\n          // Reconecta a instância\n          const connectResponse = await fetch(`${baseUrl}/instance/connect/${instance}`, {\n            method: 'GET',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          if (!connectResponse.ok) {\n            throw new Error(`Erro ao reconectar: ${connectResponse.status}`);\n          }\n\n          addLog('Instância reiniciada com sucesso!', 'success');\n          \n          // Esconde o profile-info temporariamente\n          const profileInfo = document.getElementById('profile-info');\n          if (profileInfo) {\n            profileInfo.classList.add('hidden');\n          }\n          \n          // Mostra o QR code\n          document.getElementById('qr-display').classList.remove('hidden');\n          \n          // Atualiza o status após reiniciar\n          setTimeout(() => checkConnectionStatus(baseUrl, instance, apiKey), 2000);\n        } catch (error) {\n          addLog(`Erro ao reiniciar instância: ${error.message}`, 'error');\n        }\n      }\n\n      // Função para fazer logout da instância\n      async function logoutInstance() {\n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n\n        try {\n          addLog('Desconectando instância...', 'info');\n          \n          const response = await fetch(`${baseUrl}/instance/logout/${instance}`, {\n            method: 'DELETE',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          if (response.ok) {\n            addLog('Instância desconectada com sucesso!', 'success');\n            \n            // Esconde o profile-info\n            const profileInfo = document.getElementById('profile-info');\n            if (profileInfo) {\n              profileInfo.classList.add('hidden');\n            }\n            \n            // Esconde as ações do perfil\n            document.getElementById('profile-actions').classList.add('hidden');\n            \n            // Mostra o QR code container\n            document.getElementById('qr-display').classList.remove('hidden');\n            \n            // Atualiza o status de conexão\n            document.getElementById('connection-status').innerHTML = `\n              <div class=\"flex items-center justify-center text-xs text-gray-500 dark:text-gray-400\">\n                <svg class=\"w-4 h-4 mr-1 animate-pulse\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" d=\"M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414zM7.879 6.464a1 1 0 010 1.414 3 3 0 000 4.243 1 1 0 11-1.415 1.414 5 5 0 010-7.07 1 1 0 011.415 0zm4.242 0a1 1 0 011.415 0 5 5 0 010 7.072 1 1 0 01-1.415-1.415 3 3 0 000-4.242 1 1 0 010-1.415z\" clip-rule=\"evenodd\"></path>\n                </svg>\n                Aguardando conexão...\n              </div>\n            `;\n\n            // Atualiza o status display\n            const statusDisplay = document.getElementById('status-display');\n            statusDisplay.classList.remove('hidden');\n            statusDisplay.innerHTML = `\n              <div class=\"bg-yellow-50 dark:bg-yellow-900 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                <div class=\"flex items-center justify-center\">\n                  <svg class=\"h-5 w-5 text-yellow-500 dark:text-yellow-400 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"></path>\n                  </svg>\n                  <p class=\"text-yellow-700 dark:text-yellow-300 text-sm font-medium\">Dispositivo desconectado</p>\n                </div>\n              </div>\n            `;\n\n            // Aguarda um momento antes de tentar gerar o novo QR code\n            await new Promise(resolve => setTimeout(resolve, 2000));\n\n            // Gera um novo QR code após desconectar\n            const success = await generateQRCode(baseUrl, instance, apiKey);\n            \n            if (success) {\n              // Inicia o contador e a atualização automática\n              startCountdown(baseUrl, instance, apiKey);\n            }\n\n            // Força uma verificação imediata do status\n            await checkConnectionStatus(baseUrl, instance, apiKey);\n          } else {\n            throw new Error(`Erro ao desconectar instância: ${response.status}`);\n          }\n        } catch (error) {\n          addLog(`Erro ao desconectar instância: ${error.message}`, 'error');\n        }\n      }\n\n      // Função para atualizar informações do perfil\n      async function updateProfileInfo() {\n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n\n        try {\n          addLog('Atualizando informações do perfil...', 'info');\n          \n          const response = await fetch(`${baseUrl}/instance/fetchProfile?instanceName=${instance}`, {\n            method: 'GET',\n            headers: {\n              'apikey': apiKey\n            }\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            addLog('Informações do perfil atualizadas!', 'success');\n            // Atualiza as informações na interface\n            await fetchInstanceInfo(baseUrl, instance, apiKey);\n          } else {\n            throw new Error(`Erro ao atualizar perfil: ${response.status}`);\n          }\n        } catch (error) {\n          addLog(`Erro ao atualizar perfil: ${error.message}`, 'error');\n        }\n      }\n\n      // Função para gerenciar o tema\n      function setTheme(theme) {\n        if (theme === 'dark') {\n          document.documentElement.classList.add('dark');\n          localStorage.setItem('theme', 'dark');\n          document.getElementById('theme-icon').innerHTML = '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"></path>';\n        } else {\n          document.documentElement.classList.remove('dark');\n          localStorage.setItem('theme', 'light');\n          document.getElementById('theme-icon').innerHTML = '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"></path>';\n        }\n      }\n\n      // Verifica o tema do sistema e do localStorage\n      function initTheme() {\n        const savedTheme = localStorage.getItem('theme');\n        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        \n        if (savedTheme) {\n          setTheme(savedTheme);\n        } else if (systemPrefersDark) {\n          setTheme('dark');\n        } else {\n          setTheme('light');\n        }\n      }\n\n      // Inicializa o tema\n      initTheme();\n\n      // Adiciona listener para mudança de preferência do sistema\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n        if (!localStorage.getItem('theme')) {\n          setTheme(e.matches ? 'dark' : 'light');\n        }\n      });\n\n      // Adiciona listener para o botão de tema\n      document.getElementById('theme-toggle').addEventListener('click', () => {\n        const isDark = document.documentElement.classList.contains('dark');\n        setTheme(isDark ? 'light' : 'dark');\n      });\n\n      // Função para controlar a visibilidade dos logs\n      document.getElementById('toggle-logs').addEventListener('click', () => {\n        const logsDiv = document.getElementById('logs');\n        const logsIconClosed = document.getElementById('logs-icon-closed');\n        const logsIconOpen = document.getElementById('logs-icon-open');\n        \n        if (logsDiv.classList.contains('hidden')) {\n          logsDiv.classList.remove('hidden');\n          logsIconClosed.classList.add('hidden');\n          logsIconOpen.classList.remove('hidden');\n        } else {\n          logsDiv.classList.add('hidden');\n          logsIconClosed.classList.remove('hidden');\n          logsIconOpen.classList.add('hidden');\n        }\n      });\n\n      // Função para mostrar o tutorial\n      function showTutorial() {\n        const tutorialModal = document.getElementById('tutorial-modal');\n        tutorialModal.classList.remove('hidden');\n      }\n\n      // Função para fechar o tutorial\n      function closeTutorial() {\n        const tutorialModal = document.getElementById('tutorial-modal');\n        tutorialModal.classList.add('hidden');\n        // Salva no localStorage que o tutorial já foi visto\n        localStorage.setItem('tutorialSeen', 'true');\n      }\n\n      // Quando a página carregar, verifica se o tutorial já foi visto\n      document.addEventListener('DOMContentLoaded', () => {\n        const tutorialSeen = localStorage.getItem('tutorialSeen');\n        if (!tutorialSeen) {\n          showTutorial();\n        }\n      });\n\n      // Adiciona o evento de clique no botão de fechar\n      document.getElementById('close-tutorial').addEventListener('click', closeTutorial);\n\n      // Funções para o modal de edição do perfil\n      function showEditProfileModal() {\n        const modal = document.getElementById('edit-profile-modal');\n        modal.classList.remove('hidden');\n        modal.classList.add('flex');\n      }\n\n      function closeEditProfileModal() {\n        const modal = document.getElementById('edit-profile-modal');\n        modal.classList.add('hidden');\n        modal.classList.remove('flex');\n      }\n\n      // Função para atualizar o nome do perfil\n      async function updateProfileName(name) {\n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n\n        try {\n          const response = await fetch(`${baseUrl}/instance/updateProfileName`, {\n            method: 'POST',\n            headers: {\n              'apikey': apiKey,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              instanceName: instance,\n              name: name\n            })\n          });\n\n          if (response.ok) {\n            addLog('Nome do perfil atualizado com sucesso!', 'success');\n          } else {\n            throw new Error(`Erro ao atualizar nome: ${response.status}`);\n          }\n        } catch (error) {\n          addLog(`Erro ao atualizar nome: ${error.message}`, 'error');\n        }\n      }\n\n      // Função para atualizar o status\n      async function updateProfileStatus(status) {\n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n\n        try {\n          const response = await fetch(`${baseUrl}/instance/updateProfileStatus`, {\n            method: 'POST',\n            headers: {\n              'apikey': apiKey,\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              instanceName: instance,\n              status: status\n            })\n          });\n\n          if (response.ok) {\n            addLog('Status atualizado com sucesso!', 'success');\n          } else {\n            throw new Error(`Erro ao atualizar status: ${response.status}`);\n          }\n        } catch (error) {\n          addLog(`Erro ao atualizar status: ${error.message}`, 'error');\n        }\n      }\n\n      // Função para atualizar a foto do perfil\n      async function updateProfilePicture(file) {\n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n\n        try {\n          const reader = new FileReader();\n          reader.onload = async function(e) {\n            const base64Image = e.target.result.split(',')[1];\n\n            const response = await fetch(`${baseUrl}/instance/updateProfilePicture`, {\n              method: 'POST',\n              headers: {\n                'apikey': apiKey,\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                instanceName: instance,\n                image: base64Image\n              })\n            });\n\n            if (response.ok) {\n              addLog('Foto do perfil atualizada com sucesso!', 'success');\n            } else {\n              throw new Error(`Erro ao atualizar foto: ${response.status}`);\n            }\n          };\n          reader.readAsDataURL(file);\n        } catch (error) {\n          addLog(`Erro ao atualizar foto: ${error.message}`, 'error');\n        }\n      }\n\n      // Manipulador do formulário de edição\n      document.getElementById('edit-profile-form').addEventListener('submit', async (e) => {\n        e.preventDefault();\n        \n        const name = document.getElementById('profile-name').value;\n        const status = document.getElementById('profile-status').value;\n        const pictureFile = document.getElementById('profile-picture').files[0];\n        const baseUrl = 'https://link-da-sua-api.com.br';\n        const instance = document.getElementById('instance').value;\n        const apiKey = 'suaApiKey';\n\n        if (name) {\n          await updateProfileName(name);\n        }\n        \n        if (status) {\n          await updateProfileStatus(status);\n        }\n        \n        if (pictureFile) {\n          await updateProfilePicture(pictureFile);\n        }\n\n        // Atualiza as informações do perfil na interface\n        await fetchInstanceInfo(baseUrl, instance, apiKey);\n\n        closeEditProfileModal();\n      });\n    </script>\n  </body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        208,
        0
      ],
      "id": "d383ebc6-6057-4fe2-8fdc-e4d54c79d3b5",
      "name": "HTML"
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "eeecb741-df4b-40f9-a9bc-81e23bdd2414",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-22T19:05:40.151Z",
      "updatedAt": "2025-09-22T19:05:40.151Z",
      "role": "workflow:owner",
      "workflowId": "Y0BaxX5lG3RXzTR2",
      "projectId": "GjBqXqsURslZKNiG"
    }
  ],
  "tags": []
}